name: Build iTop Docker Images

on:
  push:
    branches: [ main ]

jobs:
  process-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2  # Pour pouvoir comparer avec le commit précédent

      - name: Check if Dockerfile changed
        id: dockerfile-check
        run: |
          DOCKERFILE_CHANGED=$(git diff --name-only HEAD^ HEAD | grep -c "Dockerfile" || true)
          echo "changed=$DOCKERFILE_CHANGED" >> $GITHUB_OUTPUT

      - name: Get changed versions
        id: versions-check
        run: |
          # Si le Dockerfile a changé, on rebuild tout
          if [ "${{ steps.dockerfile-check.outputs.changed }}" != "0" ]; then
            echo "rebuild_all=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Sinon, on compare les versions dans le JSON
          git show HEAD^:itop-versions.json > old_versions.json || echo '{"images":[]}' > old_versions.json
          ADDED_VERSIONS=$(python -c |-
            import json
            with open("old_versions.json") as f:
                old = json.load(f)
            with open("itop-versions.json") as f:
                new = json.load(f)
            old_versions = {(img["version"], img["php_version"]) for img in old.get("images", [])}
            new_versions = {(img["version"], img["php_version"]) for img in new.get("images", [])}
            added = new_versions - old_versions
            if added:
                print("true")
            else:
                print("false")
          )
          echo "new_versions=$ADDED_VERSIONS" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        if: steps.dockerfile-check.outputs.changed != '0' || steps.versions-check.outputs.new_versions == 'true'
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        if: steps.dockerfile-check.outputs.changed != '0' || steps.versions-check.outputs.new_versions == 'true'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Python dependencies
        run: |
          python -m pip install docker

      - name: Process images
        run: python build_images.py
        env:
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          REBUILD_ALL: ${{ steps.dockerfile-check.outputs.changed != '0' }}
